 AdvCalc2IR CMPE230
Emre Kılıç 2021400015, Kristina Trajkovski 2020400384 Submission Date: May 1st, 2023
Introduction
AdvCalc2IR is a programming project written in C by Emre Kılıç and Kristina Trajkovski for CMPE230 in April 2023. It is highly inspired by the AdvCalc project written in March 2023 and many functions, structures, documentation paragraphs, and algorithms were reused.
AdvCalc2IR is initially run in terminal and allows users to perform algebraic and boolean operations such as addition, subtraction, multiplication, division, modulo, bitwise AND, OR, XOR, NOT, shifts, and rotations by accepting an input file of their instructions, translating the input into a low-level LLVM language, and returning a file with the results.
We (Emre and Kristina) tackled this challenge by reading the input from the file (its name comes from command argument), attempting to convert the expression line into postfix notation, parsing the postfix notation, creating the llvm instructions for expression. We also implemented new structures and functions such as HashSet and Stack which will be described in more detail below.
How to Use:
Step 1: An executable file is made by typing “make” into the terminal while in the appropriate folder.
Step 2: The executable is run by typing ./advcalc2ir <filename>.adv into the terminal.
Step 3: An .ll source file is made. It can be run through the llvm interpreter by typing lli <filename>.ll into the terminal.
Step 4: The .ll file can be compiled to an assembly source file by typing llc <filename>.ll -o <filename>.s into the terminal.
Step 5: The assembly file can be assembled using clang <filename>.s -o <filename> to get an executable.

 Input/Output Example
  
 Rules
To be able to use the Advance Calculator:
● The input message should not exceed 256 characters.
● Integer values should not exceed the standard 32-bit boundaries.
Not to receive an error:
● Negative integers should not be written directly into the terminal. However, variables
that have negative values may be stored (ex. x=-1 is invalid, but may store x as
x=2-3).
● Usage of variables which have not been priorly defined will throw an error
● Variables with function names should not be defined (xor, ls, rr, etc.).
● All functions except ‘not’ should be written alongside parentheses with exactly 2
arguments separated by a comma ‘,’.
● Each open parenthesis should be closed
● More than one ‘=’ should not be used in assignments
● The order of digits and operations between them should follow the infix notation (ex.
5 5 + is not a valid order for this code, use 5+5)
● Variables should be created only by using upper and lowercase letters of the English
alphabet
● There should be no digits on the left side of an assignment
● Parentheses should be used only on the right end side of an assignment
● Every set of parentheses should contain a variable or an integer -ex. ((())) is invalid,
but (((5)))+6 is valid
● Commas should be written inside a parentheses pair only
● Do not use square or curly brackets
Implementation
-advcalc.c
This file contains three major functions of this code:
● int main() that reads the input file and handles line by line, decides if the input is a
variable assignment or just an operation expecting an immediate output, and prints
the appropriate output
● infixToPostFix() that takes the input in infix notation, checks if written variables are
in storage if any, checks for errors, and converts the given input into postfix notation
● evaluateExpression() that takes a string (char pointer) in postfix notation, parses, creates llvm instructions for calculation and returns the final register that stores the
final result
-functions.h
This file contains macros used in output printing, new structure definitions (Stacks and HashSet variables), enum token definitions, and all of the other function headers.

 -functions.c
This file contains all of the remaining functions such as hashTable initialization; variable placement and availability checking; character type recognition; string comparison, splitting, and stripping; stack initializations, pushing, popping, and peeking; operation precedence determination, and final operation performing
Newly Defined Structures
● Stack / PStack:
-A collection of elements of type char or char pointer which pushes to and pops from the tail (last element) only.
-Related functions:
➔ Stack* initializeStack() / PStack* initializePStack():
allocates memory for the stacks by using malloc and returns a pointer to it
➔ void push(*Stack stack, char str) / void pushP(*PStack stack, char* x) :
takes the targeted stack and element (char or char pointer) as parameters
and pushes the element to the end of the given stack.
➔ char pop(*Stack stack) / char* popP(*PStack stack):
takes a stack as a parameter, removes the last element from the given stack,
and returns the element removed
➔ char peek(*Stack stack) / char* peekP(*PStack stack):
takes a stack as a parameter and returns the last element (without altering
the stack)
➔ int getSize(Stack* stack) / int getPSize(PStack* stack):
takes a stack as a parameter, returns the number of elements in the stack
● HashSet
- A collection of elements of char pointer type
- Allocates memory for the collection by using malloc
- Stores and returns a value at an index returned by a hash function
- Handles conflicts by using linear probing
- Related functions:
➔ int hash(char* str) :
takes the name of a variable as a parameter, returns the sum of the ASCII values of the name characters as an index (mod 256 to make sure the index is not out of bounds)
➔ int getVariable(Variable* table, char* key) :
takes a HashSet table and a wanted key name as parameters, calls the hash function to see the potential index of the key, checks the index or searches linearly if the index is occupied by a wrong name, returns 0 if the name has not been found or returns 1 if it has
➔ void setVariable(Variable* table, char* key, char* value) :
takes a HashSet table, a key name, and a value as parameters, calls the hash function to see the potential index of the key, checks if the index is occupied by an unwanted key, and moves forward linearly if so, creates store instruction if the key is already in the table, or creates alloca instruction for the new keys and values at an empty index.

 -Other functions:
● String functions :
➔ int compare(char* str1, char* str2):
takes two strings (character pointers) as parameters, compares all characters, returns 0 as soon as it finds a difference, and returns 1 if no differences have been found
➔ char* leftStripper(char* str) :
takes a string (char pointer) as a parameter, starting from the first character, increments the pointer if the characters are empty spaces, returns the new string (incremented char pointer) without leading spaces
➔ char* rightStripper(char* str) :
takes a string (char pointer) as a parameter, starting from the last character, replaces empty spaces with the terminal string character (‘\0’), returns the new string (char pointer) without spaces at the end
➔ char* strip(char* str) :
takes a string (char pointer) as a parameter, calls the leftStripper and rightStripper functions described above and returns a string (char pointer) without empty spaces at the beginning or end
➔ char* split(char* str, char find) :
takes a string (char pointer) and a wanted splitting character as parameters, replaces the first occurrence of the “find” character with the terminal character (‘\0’) and returns a pointer to the second part of the split string (char pointer to the character after ‘\0’)
● Character functions:
➔ char* isFunction(char* str):
takes a string (char pointer) as a parameter, returns a character representing the wanted operation if the given string matches an operation keyword (‘^’ for xor, ‘!’ for right shift, ‘$’ for left shift, ‘@’ for left rotation, ‘#’ for right rotation, ‘~’ for NOT operation).
➔ int getPrecedence(char* str):
takes a character representing an operation as a parameter, returns an int representing the precedence in our code with 1 being the lowest (functions that require parentheses in the first place), and 7 being the highest (the NOT operator)
➔ int isOperator(char* str):
takes a character representing an operation as a parameter, checks if it is one of the operations that does not require parentheses (addition, subtraction, multiplication, division, modulo, bitwise AND, or bitwise OR), returns 1 if it is an operation, returns 0 otherwise
➔ char* performOp(char* a, char* b, char c) :
takes two char pointers and a character representing an operation as parameters, creates the llvm instruction of the operation represented by c between a and b. Returns the new register storing the result of this instruction.

 ● Token Type Checking:
Checking if two consecutive token types are valid, altering memory, and generation of new tokens if necessary
Note: characters and numbers are stored in a “memory” stack, out of them tokens are generated when a space, left parenthesis, right parenthesis, or an operator comes and memory is emptied
               
 -FROM INPUT TO OUTPUT
(All of the minor functions and structures are explained in more detail above)
1) Before any lines are read a new HashSet is allocated
2) A line is read from input file
3) The line is split at the ‘=’ character if any (assignment or expression)
4) In case the line is an assignment the validity of the left-hand side is checked (letters
are allowed only)
5) The right-hand side or the expression line itself is sent to infixToPostfix() function
6) In infixToPostfix function the line is iterated character by character, errors are
checked according to the table above (they return NULL immediately), tokens are generated according to the table above, tokens of variables are created, variables’ existences are checked by getVariable() function, number tokens are created, number and variable tokens are stored in final postfix line by occurrence and in reverse (this may seem like a feature coming from previous project, but it is a bug), operations and functions are stored in stack by precedence returned by getPrecedence() and the rule that an operation of lower precedence cannot come on top of a stronger operation (in that case the operation stack is emptied and written to the final postfix line), operation and memory stacks are emptied similarly if a closed parenthesis occurs, before the end all stacks are emptied and a final postfix line is returned
7) The resulting postfix line from step 6 is sent to evaluateExpression() function unless it was NULL, numbers and variables are reversed, numbers are pushed to the stack when an operation is seen, two char pointers are popped from the stack and the operation instruction is created by performOp(), the resulting register from performOp() is added to the stack, the last remaining element in the stack is the final result returned.
8) In case the step 3 determined that the line was an assignment, the result from evaluateExpression() is supposed to be assigned to (or updated) the variable name at the left hand side by the instructions created by setVariable(). Otherwise, if the line was just an expression the print function call instruction is created with the result from evaluateExpression(). Now the program goes back to step 2 for later lines.

Difficulties Encountered and Improvements
-Finding the right approach
Since we have completed the AdvCalc project by using postfix notation, most of the functions and approaches stayed the same. The parsing part required almost no modification, besides two newly added operations and a few type casting changes. The evaluateExpression and performOp are functions that had the most changes. Evaluate expression does not consist of numbers and operators only, but also variables and registers. There is no integer stack anymore; all of the variables and numbers are stored as char pointers in a pointer stack - PStack. Also, performOp does not directly make any calculations anymore, but writes appropriate instructions to the ll file.
Another element that required a change was variable storage. There was no need for a HashMap for no variables connected to their keys should be stored locally, but in ll file as registers. With experience from previous years, we decided that the fastest and best way to store was a HashSet which will store names of appearing variables only. It ended up being the simplest structure that brought a few bugs into our code, for it was called multiple times from different parts of the code with wrong parameters, and used comparison with unexpected types.

 -Errors worth of mention (the biggest bugs)
One of the errors that we faced in this project was an unexpected difference between operating system reactions. For, a MAC machine handled the unused memory spaces allocated by malloc as if they were not there in the first place. However, when we tested our code in Windows and appropriate Ubuntu interpreters, the random values in allocated but unused spaces caused trouble and were printed to ll file together with the wanted values. We have fixed this bug by using calloc instead.
Then, we faced a problem specific to llvm. Merely, there are two types of shift instructions - ashr (arithmetic shift) and lshr (logic shift). From piazza, we were instructed to use the signed shift as the expressions might have negative values. However, this resulted in undefined behavior when it came to rotating negative values (rotation consists of two shifts connected by a bitwise OR operation). We solved the problem by trial and error and concluded that we should do normal shifting operations with arithmetic shifts and shifting operations within rotations with logical shifts in order to receive the desired result.
The other smaller challenge that we faced arrived after receiving the results from AdvCalc. We did not pass all of the test cases, for we did not handle multiplication between two negative numbers well. Also, we forgot to free many of the pointers to allocated memory which caused a leak and undesired results. We have done several tests in AdvCalc2IR and made sure that it was working correctly for such cases.
Conclusion
As we submit our second project in C, we can most definitely say that AdvCalc++ taught us a lot about compiler designing on the lowest level interactions. Each calculation must be brought to the lowest level - operating between two values at a time at most, which definitely required more code, time, and a new designing approach.
